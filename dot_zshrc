# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:/opt/nvim-linux64/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"


# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git aws kubectl docker docker-compose minikube terraform terragrunt poetry asdf kubectx) 

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"
export PATH=$PATH:/usr/local/go/bin:~/go/bin
# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
source <(jira completion zsh)

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias python="python3"
alias cat="bat"
alias ocat="/bin/cat"
alias ls="exa --icons"
alias vim="nvim"
alias v="nvim"
alias containerlab="sudo containerlab"
alias clip="clip.exe"
alias k="kubectl"
alias marp='docker run --rm --init -v $PWD:/home/marp/app/ -e LANG=$LANG -e MARP_USER="$(id -u):$(id -g)" marpteam/marp-cli'
alias sb="cd ~/git/second-brain/"
alias generatereadme="terraform-docs -c .terraform-docs.yml . > README.md"

function cwhois {
	whois -h bgp.tools " -v $*";
}

function kubenode {
  kubectl get pods -A -o wide --field-selector spec.nodeName=$*
}

function showip {
  aws --region eu-west-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=instance-id,Values=$*" --query 'Reservations[*].Instances[*].[PrivateIpAddress]' --output text
}

function shoot {
  aws ec2 terminate-instances --instance-ids $*
}

export VISUAL=nvim
export EDITOR="$VISUAL"
export SECOND_BRAIN="$HOME/git/second-brain"


# Función para exportar AccessKeyId, SecretAccessKey y SessionToken a partir del ARN del rol
assumerole_export() {
    local role_arn="$1"
    local role_session_name="carloslatorre-cli"

    # Llama a aws sts assume-role y obtén las credenciales
    local sts_output
    sts_output=$(aws sts assume-role --role-arn "$role_arn" --role-session-name "$role_session_name")

    # Extrae las credenciales de la salida JSON
    local access_key_id
    local secret_access_key
    local session_token

    access_key_id=$(echo "$sts_output" | jq -r '.Credentials.AccessKeyId')
    secret_access_key=$(echo "$sts_output" | jq -r '.Credentials.SecretAccessKey')
    session_token=$(echo "$sts_output" | jq -r '.Credentials.SessionToken')

    # Exporta las variables de entorno
    export AWS_ACCESS_KEY_ID="$access_key_id"
    export AWS_SECRET_ACCESS_KEY="$secret_access_key"
    export AWS_SESSION_TOKEN="$session_token"

    echo "Credenciales de AWS exportadas."
}

# Función para exportar AccessKeyId, SecretAccessKey y SessionToken a partir del ARN del rol through external id
assumerole_external() {
    local role_arn="$1"
    local role_session_name="carloslatorre-cli"
    local external_id="$2"

    # Llama a aws sts assume-role y obtén las credenciales
    local sts_output
    sts_output=$(aws sts assume-role --role-arn "$role_arn" --role-session-name "$role_session_name" --external-id "$external_id")

    # Extrae las credenciales de la salida JSON
    local access_key_id
    local secret_access_key
    local session_token

    access_key_id=$(echo "$sts_output" | jq -r '.Credentials.AccessKeyId')
    secret_access_key=$(echo "$sts_output" | jq -r '.Credentials.SecretAccessKey')
    session_token=$(echo "$sts_output" | jq -r '.Credentials.SessionToken')

    # Exporta las variables de entorno
    export AWS_ACCESS_KEY_ID="$access_key_id"
    export AWS_SECRET_ACCESS_KEY="$secret_access_key"
    export AWS_SESSION_TOKEN="$session_token"

    echo "Credenciales de AWS exportadas."
}

clean_aws_credentials() {
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
}

### Krew Installation
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"


export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
export PATH="$PATH:/c/Program Files/Oracle/VirtualBox"
export VAGRANT_DEFAULT_PROVIDER="virtualbox"

. "$HOME/.asdf/installs/rust/1.85.0/env"

# INSTALLATION ASDF
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
# append completions to fpath
fpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)
# initialise completions with ZSH's compinit
autoload -Uz compinit && compinit

